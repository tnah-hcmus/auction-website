const db = require('../utils/db');
module.exports = {
    getProfilebyID(idU) { return db.load("select u.id as id, u.name as name, u.email as email, u.username as username, count(r.status) as totalLike from user u, review r where u.id = r.id_user and r.status = 1 and u.id = " + idU + " group by u.id, u.name, u.email, u.username") },
    getSellerbyID(idU) { return db.load("SELECT u.name as name FROM user u where u.id = " + idU) },
    getOwnerbyID(id) { return db.load("SELECT u.id as ID, u.name as name, u.email as email FROM user u, product p where p.id_owner = u.id AND p.id = " + id) },
    getHistorybyID(id) { return db.load("select p.id as id, p.current_price as current_price, u.name as bidder, p.auctionTIme as time from product p, user u where p.id_bidder = u.id and p.id = " + id + " order by p.auctionTIme desc") },
    getProductbyID(id) { return db.load("SELECT p.name as name, p.current_price as price, p.id as id, p.auctionTime as auctionTime, p.details as detail,  p.startDate as dateStart, p.endDate as dateEnd, c.NAME as category, u.NAME as hold, u.email as bidRating, u.email as bidLink FROM product p, category c, user u where p.id_bidder = u.id and p.category = c.id and p.id = " + id) },
    getListCategory() { return db.load("SELECT c.id as ID, c.NAME as name FROM category c WHERE c.id != '4' AND c.id != '5'") },
    getListAuctionedProduct(idU, offset) { return db.load("Select p.id as id, p.name as name, p.category as cat, p.current_price as price, p.id_owner as owner, u.name as ownerName from product p, user u where u.id = p.id_owner and p.auctioned = 1 and p.id_bidder =" + idU + " limit 6 offset " + offset) },
    getReview(idU, offset) { return db.load("Select r.id_reviewer as reviewerID, u.name as reviewerName, r.time as time, r.review as review from review r, user u where r.id_reviewer = u.id and id_user = " + idU + " limit 6 offset " + offset) },
    topAuctionTime() { return db.load('SELECT p.name as name, current_price as price, p.buy_now_price as buynow, p.id as id, p.details as detail,  p.startDate as dateStart, p.endDate as dateEnd, c.NAME as category, u.NAME as hold FROM product p, category c, user u where p.id_bidder = u.id and p.category = c.id ORDER BY p.auctionTime DESC LIMIT 5') },
    topAuctionPrice() { return db.load('SELECT p.name as name, current_price as price, p.buy_now_price as buynow, p.id as id, p.details as detail,  p.startDate as dateStart, p.endDate as dateEnd, c.NAME as category, u.NAME as hold FROM product p, category c, user u where p.id_bidder = u.id and p.category = c.id and p.auctioned = 0 ORDER BY current_price DESC LIMIT 5') },
    topDeAuctionPrice() { return db.load('SELECT p.name as name, current_price as price, p.buy_now_price as buynow, p.id as id, p.details as detail,  p.startDate as dateStart, p.endDate as dateEnd, c.NAME as category, u.NAME as hold FROM product p, category c, user u where p.id_bidder = u.id and p.category = c.id and p.auctioned = 0 ORDER BY current_price ASC LIMIT 5') },
    topNearestAuction() { return db.load('SELECT p.name as name, current_price as price, p.buy_now_price as buynow, p.id as id, p.details as detail,  p.startDate as dateStart, p.endDate as dateEnd, c.NAME as category, u.NAME as hold FROM product p, category c, user u where p.id_bidder = u.id and p.category = c.id and p.endDate < CURDATE() ORDER BY endDate DESC LIMIT 5') },
    faq() { return db.load('select * from faq') },
    getListmyProductbyID(idU, offset) { return db.load("select p.id as id, p.name as product, c.name as cat, u.name as ownerName,p.current_price as price, p.startDate as startDate, p.endDate as endDate, p.details as details, p.buy_now_price as buyNow from user u, product p, category c where u.id = p.id_owner and p.category = c.id and  u.id =" + idU + " limit 6 offset " + offset) },
    getwatchListbyID(idU, offset) { return db.load("select w.id_product as id, p.name as name, c.name as cat, u2.id as ownerID, u2.name as ownerName, p.startDate as startDate, p.endDate as endDate, p.current_price as currentBid, p.buy_now_price as buyNow, p.details as details from product p, watchList w, user u1, user u2, category c where w.id_product = p.id and w.id_user = u1.id and p.category = c.id and p.id_owner = u2.id and w.id_user = " + idU + " limit 6 offset " + offset) },
    getwonProductbyID(idU, offset) { return db.load("select w.id_product as id, p.name as name, c.name as cat, u2.id as ownerID, u2.name as ownerName, p.startDate as startDate, p.endDate as endDate, p.current_price as currentBid, p.details as details from product p, wonProduct w, user u1, user u2, category c where w.id_product = p.id and w.id_user = u1.id and p.category = c.id and p.id_owner = u2.id and w.id_user = " + idU + " limit 6 offset " + offset) },
    getbiddingProductbyID(idU, offset) { return db.load("select b.id_product as id, p.name as name, c.name as cat, u2.name as ownerName, p.startDate as startDate, p.endDate as endDate, p.current_price as currentBid, p.details as details, p.buy_now_price as buyNow from product p, biddingproduct b, user u1, user u2, category c where b.id_product = p.id and b.id_user = u1.id and p.category = c.id and p.id_owner = u2.id and b.id_user = " + idU + " limit 6 offset " + offset) },
    countauctionedPro(idU) { return db.load("Select count(*) as total from product p, user u where u.id = p.id_owner and p.auctioned = 1 and p.id_bidder = " + idU) },
    countReview(idU) { return db.load("Select count(*) as total from review r, user u where r.id_reviewer = u.id and id_user = " + idU) },
    countmyPro(idU) { return db.load("select count(*) as total from user u, product p, category c where u.id = p.id_owner and p.category = c.id and  u.id = " + idU) },
    countwatchListPro(idU) { return db.load("select count(*) as total from product p, watchList w, user u1, user u2, category c where w.id_product = p.id and w.id_user = u1.id and p.category = c.id and p.id_owner = u2.id and w.id_user = " + idU) },
    countwonPro(idU) { return db.load("select count(*) as total from product p, wonProduct w, user u1, user u2, category c where w.id_product = p.id and w.id_user = u1.id and p.category = c.id and p.id_owner = u2.id and w.id_user = " + idU) },
    countbiddingPro(idU) { return db.load("select count(*) as total from product p, biddingproduct b, user u1, user u2, category c where b.id_product = p.id and b.id_user = u1.id and p.category = c.id and p.id_owner = u2.id and b.id_user = " + idU) },
    getTotalLike(id) { return db.load("SELECT Count(r.status) as totalLike FROM review r WHERE r.id_user=" + id + " AND r.status=1") },
    getTotalDislike(id) { return db.load("SELECT Count(r.status) as totalDisLike FROM review r WHERE r.id_user=" + id + " AND r.status=0") }
    //searchProductByName(input, limit, offset) { return db.load("SELECT p.id as ID, p.name as name, u.name as hold, p.current_price as price, p.details as details, p.buy_now_price as buynow, p.startDate as dateStart, p.endDate as dateEnd, c.NAME as type  FROM category c, product p, user u  WHERE p.category = c.id AND u.id = p.id_bidder AND p.auctioned = 0 AND MATCH(p.name) AGAINST('" + input + "')  LIMIT " + limit + " OFFSET " + offset) },
    //searchProductByCategory(input, limit, offset) { return db.load("SELECT p.id as ID, p.name as name, u.name as hold, p.current_price as price, p.details as details, p.buy_now_price as buynow, p.startDate as dateStart, p.endDate as dateEnd, c.NAME as type FROM category c, product p, user u  WHERE p.category = c.id AND u.id = p.id_bidder AND p.auctioned = 0 AND MATCH(c.NAME) AGAINST('" + input + "')  LIMIT " + limit + " OFFSET " + offset) },
}